;;************************************************
;; rgr-c.el
;;
;; CC++ related utilities
;; Richard Riley.
;; http://richardriley.net/default/projects/emacs/
;;************************************************

(defun my-c-mode-auto-pair ()
  (interactive)
  (make-local-variable 'skeleton-pair-alist) 
  (setq skeleton-pair-alist  '(
			       (?` ?` _ "''")
			       (?\( ?  _ " )") 
			       (?\"? _"\"")
			       (?\'? _"'")
			       (?\[ ?  _ " ]")
			       (?\<?  _ " >") 
			       (?{ \n > _ \n ?} >)))
  (setq skeleton-pair t)
  (local-set-key (kbd "(")   'skeleton-pair-insert-maybe)
  (local-set-key (kbd "{")   'skeleton-pair-insert-maybe)
  (local-set-key (kbd "`")   'skeleton-pair-insert-maybe)
  (local-set-key (kbd "<")   'skeleton-pair-insert-maybe)
  (local-set-key (kbd "\"")  'skeleton-pair-insert-maybe)
  (local-set-key (kbd "'")  'skeleton-pair-insert-maybe)
;  (local-set-key (kbd "'")   '(lambda ()
;				(interactive)
;				(skeleton-pair-insert-maybe)
;				(delete-backward-char)))
  (local-set-key (kbd "[")   'skeleton-pair-insert-maybe))

(add-hook 'c-mode-common-hook 'my-c-mode-auto-pair)

(defun my-c-mode-common-hook()
  ;; ====================== *compilation* ===============================
  (add-hook 'c-mode-common-hook 
            (lambda ()
              (which-function-mode t)))
  
  (defun do-compile()
    (interactive)
    ;; (setq compilation-window-height 16)
    ;; (setq compilation-scroll-output t)
    (setq compilation-finish-functions
	  (lambda (buf str)
	    (if (string-match "exited abnormally" str)
		;;there were errors
		(message "compilation errors, C-M-n to goto next error.")
	      ;;no errors, make the compilation window go away in 5.0 seconds
	      ;;(run-at-time 5.0 nil 'delete-windows-on buf)
	      (message "No compilation errors!")
	      
	      (if (gnus-buffer-exists-p "*c-term*")
		  (progn
		    (switch-to-buffer-other-window "*c-term*")
		    (term-send-up))
		
		;; else create buffer "*c-term*
		(switch-to-buffer-other-window "*compilation*")
		(split-window-vertically nil)
		(ansi-term "/bin/bash" "c-term")
		))))
    (compile (make-command))
    )

  ;; ================================================================
  (defun make-command()
    
    (if   (or (file-exists-p "makefile")
              (file-exists-p "Makefile"))
	(progn
	  (message "*Makefile found*")
	  "make")
      
      (if  (file-exists-p "SConstruct")
	  "scons"
	(let ((file (file-name-nondirectory buffer-file-name)))
	  (if (or (equal (file-name-extension buffer-file-name) "cc")
		  (equal (file-name-extension buffer-file-name) "c++")
		  (equal (file-name-extension buffer-file-name) "cpp"))
	      (progn
		(format "%s %s %s -o %s"
			(or (getenv "CC") "g++")
			(or (getenv "CPPFLAGS")"-Wall -g")
			buffer-file-name 
			(file-name-sans-extension file)
			))

	    ;; for simple program
	    (format "%s -o %s %s %s %s"
	            (or (getenv "CC") "gcc")
	            (file-name-sans-extension file)
	            (or (getenv "CPPFLAGS")"-DDEBUG=9")
	            (or (getenv "CFLAGS") " -g -Wall -Wshadow")
	            file)
	    
	    ;; ;; for compiling GTK program
	    ;; (format "%s -o %s %s %s %s %s"
	    ;; 	    (or (getenv "CC") "gcc")
	    ;; 	    (file-name-sans-extension file)
	    ;; 	    (or (getenv "GTKFLAGS") "`pkg-config --cflags --libs gtk+-2.0 gmodule-2.0 libglade-2.0`")
	    ;; 	    (or (getenv "CPPFLAGS")"-DDEBUG=9")
	    ;; 	    (or (getenv "CFLAGS") "-std=c99 -pedantic -Wall -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wconversion  -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wnested-externs -Winline -g")
	    ;; 	    file)

	    )))))


  (defun do-lint()
    (interactive)
    (set (make-local-variable 'compile-command)
         (let ((file (file-name-nondirectory buffer-file-name)))
           (format "%s %s %s"
                   "splint"
                   "+single-include -strict -compdef -nullpass -preproc +matchanyintegral -internalglobs -I/usr/include/gtk-2.0/ -I/usr/include/glib-2.0 -I/usr/lib/glib-2.0/include -I/usr/include/cairo/ -I/usr/include/pangomm-1.4/pangomm/"
                   file
                   )))
    (message compile-command)
    (compile compile-command)
    )

  (defun do-cdecl () 
    (interactive)
    (shell-command
     (concat "cdecl explain \"" (buffer-substring (region-beginning)
                                                  (region-end)) "\""))
    )
  
  ;; ================================================================
  ;; very useful tool!!!
  ;; compile
  (define-key c-mode-base-map [(f5)]  (lambda()(interactive)(do-compile)))

  ;; ================================================================
  ;; debug
  (setq gdb-show-main t)  
  (setq gdb-many-windows t)
  (setq gdb-speedbar-auto-raise nil)

  (define-key c-mode-base-map [f6]         'gdb)
  (define-key c-mode-base-map [(shift f6)] 'gdb-restore-windows)


  ;; ================================================================
  ;; link
  (define-key c-mode-base-map [(shift f7)]    (lambda()(interactive)(do-lint)))
  (define-key c-mode-base-map [(control f7)]  (lambda()(interactive)(do-cdecl)))

  ;; ================================================================
  ;; find file
  (define-key c-mode-base-map [(f8)]  'ff-find-other-file)
  ;;(define-key c-mode-base-map [(f8)]  'ff-find-related-file)
  (define-key c-mode-base-map (kbd "C-M-l") 'semantic-ia-complete-symbol-menu)

  (define-key c-mode-base-map "\C-\M-n" 'next-error)
  (define-key c-mode-base-map "\C-\M-p" 'previous-error)
  (define-key c-mode-base-map "\C-c\C-t" "\C-a\C- \C-n\M-w\C-y\C-p")
  
  ;; ================================================================
  ;; mode load here.
  ;; c-eldoc.el must be load before using this
  (setq c-eldoc-includes "`pkg-config gtk+-2.0 --cflags` -I./ -I../ ")
  (c-turn-on-eldoc-mode)
  (load "c-eldoc")
  ;; flyspell
  (flyspell-prog-mode)
  (set (make-local-variable 'company-backends) '(company-semantic))
  ;; company mode
  (company-mode 1)
  
  ;; basic configure
  (setq indent-tabs-mode nil)		; use space instead of tab
  (c-set-style "stroustrup")
  (setq tab-width 4)
  (c-toggle-auto-hungry-state 1)	;  this make auto-newline and hungry-delete

  ;; ================================================================
  ;; some extra configure.
  (company-mode 0)
  )

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;  ;;does not work
;; (defun my-gud-mode-hook()
;;   ;; for *gud* buffer
;;   (define-key gud-mode-map "\C-M-p"        'comint-previous-input)
;;   (define-key gud-mode-map "\C-M-n"        'comint-next-input)
;;   (define-key gud-mode-map "\M-n"          'gud-next)
;;   (define-key gud-mode-map "\M-s"          'gud-step)
;;   (define-key gud-mode-map "\M-f"          'gud-finish)
;;   (define-key gud-mode-map "\M-w"          'gud-watch)
;;   (define-key gud-mode-map "\M-p"          'gud-print)
;;   (define-key gud-mode-map "\M-b"          'gud-break)
;;   ;; for *breakpoints* buffer
;;   (define-key gud-mode-map "\M- "          'gdb-toggle-breakpoint)
;;   (define-key gud-mode-map "\M-d"          'gdb-delete-breakpoint)
;;   )
;; (add-hook 'gud-mode-common-hook 'my-gud-mode-hook)

(provide 'dotprogramming-c)

